var signatures = require('sodium-signatures')
var encryption = require('sodium-encryption')
var ed2curve = require('ed2curve')
var bufferJSON = require('buffer-json')

// sender and receiver are ed25519 key pair generated by signatures.keyPair()

function message (sender, receiver, payload) {
  payload = Buffer(payload)
  var sig = signatures.sign(payload, sender.secretKey)
  var nonce = encryption.nonce()

  var sharedKey = encryption.scalarMultiplication(ed2curve.convertSecretKey(sender.secretKey), ed2curve.convertPublicKey(receiver.publicKey))

  return {
    nonce: nonce,
    payload: encryption.encrypt(Buffer(sign(sig, payload)), nonce, sharedKey)
  }
}

function openMessage (sender, receiver, msg) {
  var sharedKey = encryption.scalarMultiplication(
    ed2curve.convertSecretKey(receiver.secretKey),
    ed2curve.convertPublicKey(sender.publicKey))
  var decrypted = encryption.decrypt(msg.payload, msg.nonce, sharedKey)
  if (!decrypted) return null

  decrypted = JSON.parse(decrypted, bufferJSON.reviver)

  if (!signatures.verify(decrypted.payload, decrypted.sig, sender.publicKey)) return null

  return decrypted.payload
}

module.exports = {message: message, openMessage: openMessage}

function sign (sig, payload) {
  return Buffer(JSON.stringify({sig: sig, payload: payload}, bufferJSON.replacer))
}
